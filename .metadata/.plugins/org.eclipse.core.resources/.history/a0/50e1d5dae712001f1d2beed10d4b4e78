package com.lcwd.apiGateway.configs;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;
import org.springframework.security.config.web.server.ServerHttpSecurity;
import org.springframework.security.oauth2.jwt.JwtDecoder;
import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;
import org.springframework.security.web.server.SecurityWebFilterChain;

@Configuration
@EnableWebFluxSecurity
public class SecurityConfig {

	@Bean
	public SecurityWebFilterChain securityWebFilterChain(ServerHttpSecurity serverHttpSecurity) {

		serverHttpSecurity
			.authorizeExchange()
			.anyExchange()
			.authenticated()
			.and()
			.oauth2Client()
			.and()
			.oauth2ResourceServer()
			.jwt();
			
		return serverHttpSecurity.build();	
	} 

	
	 @Bean
	    public SecurityWebFilterChain securityWebFilterChain2(ServerHttpSecurity http) {
	        http
	            .authorizeExchange()
	                .anyExchange().authenticated()
	                .and()
	            .httpBasic().and() // or .formLogin().and() depending on your authentication method
	            .oauth2Login()
	                .and()
	            .oauth2ResourceServer()
	                .jwt(jwt -> jwt.decoder(jwtDecoder()));
	        return http.build();
	    }
	    
	    @Bean
	    public JwtDecoder jwtDecoder() {
	        return NimbusJwtDecoder.withJwkSetUri("https://your-okta-domain/oauth2/default/.well-known/oauth-authorization-server/jwks")
	                .build();
	    }
}
