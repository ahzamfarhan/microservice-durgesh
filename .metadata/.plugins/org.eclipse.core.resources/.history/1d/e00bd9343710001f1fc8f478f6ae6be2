package com.lcwd.userservice.controllers;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.lcwd.userservice.entities.User;
import com.lcwd.userservice.models.Hotel;
import com.lcwd.userservice.models.Rating;
import com.lcwd.userservice.services.UserService;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@RestController
@RequestMapping(value = "/users")
@AllArgsConstructor
@Slf4j
public class UserController {

	private UserService userService;

	@PostMapping
	public ResponseEntity<User> createUser(@RequestBody User user) {
		return ResponseEntity
				.status(HttpStatus.CREATED)
				.body(userService.saveUser(user));
	}

	@PutMapping
	public ResponseEntity<User> updateUser(@RequestBody User user) {
		return ResponseEntity.ok(userService.updateUser(user));
	}
	
	@GetMapping
	public ResponseEntity<List<User>> getAllUsers() {
		
		return ResponseEntity
				.status(HttpStatus.OK)
				.body(userService.getAllUsers());
	}
	
	@GetMapping("/email/{email}")
	public ResponseEntity<User> getUserByEmail(@PathVariable("email") String email) {
		return ResponseEntity.ok(userService.getUserByEmail(email));
	}
	
	/*
	 * Apply @CircuitBreaker annotation to make circuit break active for this handler method.
	 * 
	 *  Annotation:
	 *    
	 *    @CircuitBreaker
	 * 
	 *    	name 
	 *    		
	 *    		The name of the circuit breaker pattern to be applied. We use this name 
	 *          in configuration file to configure circuit breaker property which is applicable
	 *          for this handler method.
	 *             
	 *             
	 *     fallbackMethod
	 *     
	 *     		The name of the fallback method executes when 'getUserById()' method failed to produce 
	 *     		response. Fallback method is fault tolarance method handler. This method executes and
	 *     		produce fallback response which is sent request initially handled by 'getUserById()' method
	 *     
	 *     		Parameter of fallback method
	 * 
	 *     		  String userId
	 *     
	 *     			The parameter must match with parameter of handler method. Here our handler method is 
	 *     			getUserById(@PathVariable("userId") String userId) so our fallback method should be
	 *     			ratingHotelFallback	(@PathVariable("userId") String userId).
	 *     
	 *     		 Exception exception
	 *     
	 *     			The last parameter of fallback method should be Exception type.
	 *     
	 *     	   Returned Type of fallback method
	 *     		
	 *     			The response type of fallback method must matches with return type of handler 
	 *     			method of request which is here getUserById(@PathVariable("userId") String userId)	
	 * 
	 *     			Justification:
	 *     				
	 *     				The returned type of fallback method is noting but the Response that expected to be returned
	 *     		 		by handler method which is 'getUserById(@PathVariable("userId") String userId)' but it is
	 *     				failed to generate send response to request hence our fallback method will return response
	 *     				hence the response type of fallback method must matches with return type of handler method of 
	 *     				request which is here getUserById(@PathVariable("userId") String userId) 
	 */
	@CircuitBreaker(name="ratingHotelCircuitBreaker", fallbackMethod = "ratingHotelFallback")
	@GetMapping("/{userId}")
	public ResponseEntity<User> getUserById(@PathVariable("userId") String userId) {
		return ResponseEntity.ok(userService.getUserById(userId));
	}
	
	/*
	 *	This is fallback method for circuit breaker which will generate response and sends
	 *  it request which is not handled by the handler method 
	 *  'public ResponseEntity<User> getUserById(@PathVariable("userId") String userId)' method.
	 *  
	 *  	Method params:
	 *  	
	 *  		The method params for the fallback method must followed by last param of exception and this 
	 *   		param list should match with handler method to which fallback mapped using annotation @CircuitBreaker. See the sample
	 *   
	 *   			@CircuitBreaker(name="ratingHotelCircuitBreaker", fallbackMethod = "ratingHotelFallback")
	 *    
	 *     		params of fallback method respresents request input for handler method as well as error that causes this fallbackt o kick into
	 *  		action.
	 *  
	 *   	Return Type
	 *   
	 *   		Return type of this fallback metho match with return type response of request handler method for
	 *   		which is defined or mapped.
	 *   
	 *   
	 *   	
	 *   	public matching_response_type_handler_method name_fallback_method(param_list_matching_to_param_list_of_handler_methid, Extra_Param_of_Exception)
	 *   
	 *   
	 *   		Sample:
	 *   
	 *   			public ResponseEntity<User> ratingHotelFallback(String userId, Exception ex) 
	 *   
	 *   
	 *   
	 */
	public ResponseEntity<User> ratingHotelFallback(String userId, Exception ex) {
		
		log.info("Service is down. Here is error: " + ex.getMessage());
		
		return ResponseEntity.ok(
					User.builder()
						.email("dummy@dummy.com")
						.name("Some dummy user for user id " + userId)
						.ratings(List.of(
									Rating
									.builder()
									.hotel(new Hotel("101", "Dummy Hotel", "Dummy Location", 
												"Dummy Description"))
									.hotelId(userId)
									.rating(0)
									.userId(userId)
									.remark("dummy rating")
									.userId(userId)
									.build()))
						.userId(userId)
						.build());
	}
	
	
	@DeleteMapping("/{userId}")
	public ResponseEntity<String> deleteUser(@PathVariable("userId") String userId) {
		userService.deleteUser(userId);
		return ResponseEntity.ok(userId);
		
	}
	
	@DeleteMapping("/email/{email}")
	public ResponseEntity<String> deleteUserByEmail(@PathVariable("email") String email) {
		userService.deleteUserByEmail(email);
		return ResponseEntity.ok(email);
	}
}
